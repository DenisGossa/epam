Требования 
1)	Для каждого задания в начале разработать блок-схему вычислительного алгоритма. 
2)	Разработать программы, реализующие данные алгоритмы. Работа с консолью должна быть минимальной. 
3)	При выполнении каждого задания необходимо по максимуму пытаться разрабатывать универсальный код. 
4)	При разработке программ рекомендуется придерживаться принципа единственной ответственности (Single Responsibility Principle, SRP), т.е. методы класса должны проектироваться и реализовываться таким образом, чтобы они были менее завязаны с другими методами при своей работе. 
5)	Отделите основную логику программы от её тестирования, т.е. минимум в решении должно быть два класса. 
6)	Если иное не сказано, то элементы массива являются вещественными числами. 
7)	Для инициализации элементов многомерного массива используйте специальный метод-инициализатор, который на вход принимает объект-массив и параметры, задающий диапазон случайных значений. 
8)	Для генерирования случайных чисел воспользуйтесь методами объекта класса java.util.Random. 
9)	Для проверки всех вариантов правильности работы алгоритма заранее в виде «хардкода» подготовьте матрицы с целевыми значениями. 
10)	При разработке программ придерживайтесь соглашений по написанию кода на JAVA (Java Code-Convention).

Основное задание №3

Задана матрица размера N x M. Необходимо выполнить следующие действия: 
- найти экстремальные значения (минимальный и максимальный элементы) данной матрицы; 
- найти среднеарифметическое и среднегеометрическое значения всех элементов матрицы; 
- найти позицию первого встретившегося локального минимума (максимума), а если таких элементов нет, то возвратить -1 (локальный минимум  
   – это элемент, который меньше любого из своих соседей; локальный максимум – это элемент, который больше любого из своих соседей); 
- транспонировать матрицу (при решении данного задания не рекомендуется задействовать дополнительную память).


 
Что нужно запомнить (краткие тезисы)

Перед написанием очередного приложения, очень важно вспомнить (запомнить) следующие вещи о Java-массивах: 
1. Массив представляет собой совокупность однотипных данных (переменных), доступ к которым осуществляется через общее имя массива. 
2. В Java есть два типа массива: одномерные (самые востребованные) и многомерные (двух-, трёхмерные и т.д.). 
3. Одномерный массив – это список (вектор) однотипных связанных данных (переменных). 
4. Многомерный массив – это массив массивов. 
5. Среди многомерных массивов наиболее популярным и простым является двумерный массив, который представляет собой список одномерных массивов с одинаковым типом элементов. 
6. Выделяя память под многомерный массив, достаточно указать лишь первый (крайний левый) размер. А память под остальные размеры массива можно выделять по отдельности. 
7. Массив может хранить как данные примитивных типов данных, так и ссылочных типов данных. 
8. Главное преимущество массива – это эффективное использование памяти и организация хранение данных в ней. 
9. Массив в Java – это объект, класс которого создаётся «на лету» перед созданием объекта массива во время выполнения кода. 
10. Создание массива происходит в два этапа. Сначала объявляется ссылочная переменная на соответствующий тип массива, а затем выделяется память для массива, адрес на который сохраняется в ссылочную переменную. 
11. Память для массивов в Java динамически распределяется с помощью оператора new. 
12. При создании размер массива может задаваться любым целым числом или выражением, результат которого является целое число. 
13. Если размер массива задан некорректно (отрицательным значением) или данное значение получается в результате выполнения соответствующего выражения, то во время выполнения программы выбрасывается исключительная ситуация NegativeArraySizeException. 
14. Объект массива может быть создан с нулевой длиной. 
15. Доступ к элементам массива осуществляется через их порядковый номер – индекс (индекс обозначает положение элемента в массиве). 
16. Нумерация элементов массива начинается с нуля. 
17. Границы массива в Java строго соблюдаются. Если код выходит за пределы массива, то при выполнении программы выбрасывается исключительная ситуация ArrayIndexOutOfBoundsException. 
18. Т.к. массив реализован в виде объекта, то в каждом массиве содержится свойство length, которое хранит размер соответствующего массива. 
19. Если необходимо обработать каждый элемент массива, то это удобно сделать с помощью циклов, особенно с помощью цикла for. 
20. C JDK 5.0 в Java появилась ещё одна разновидность цикла – расширенный цикл for (или for-each), который призван максимально облегчить (рационализировать) перебор элементов любого из контейнеров в Java, в том числе и элементов массива. Однако, с помощью данного цикла не возможно изменить состояние самого массива – для этого лучше воспользоваться классическими циклами. 
21. Для получения дополнительного функционала при работе с массивами используют соответствующие статические методы утилитного (сервисного) класса java.util.Arrays.
